const stompClient = new StompJs.Client({
    brokerURL: 'ws://localhost:9091/mu-autotest'
});

stompClient.onConnect = (frame) => {
    console.log('Connected: ' + frame);
    stompClient.subscribe('/user/topic/attempts', (response) => {
        console.log(response)
        var attempt = JSON.parse(response.body);

        // Access the attributes of the Attempt object
        var id = attempt.id;
        var runNumber = attempt.runNumber;
        var detailsUrl = attempt.detailsUrl;
        var result = attempt.result;
        // Access other attributes as needed

        // Handle the message as desired
        console.log("Received Attempt: ", attempt);

        // Example: Update HTML content with the received data
        var attemptInfo = "ID: " + id + ", Run Number: " + runNumber + ", Result: " + result;
        console.log(attemptInfo)
        console.log(JSON.parse(response.body));
        addAccordionItem(JSON.parse(response.body))
        disconnect();
    });
    submitTask();
};

stompClient.onWebSocketError = (error) => {
    console.error('Error with websocket', error);
};

stompClient.onStompError = (frame) => {
    console.error('Broker reported error: ' + frame.headers['message']);
    console.error('Additional details: ' + frame.body);
};


function connect(callback) {
    stompClient.activate();
}

function disconnect() {
    stompClient.deactivate();
    console.log("Disconnected");
}

function submitTask() {
    if (stompClient.connected) {
        let labId = parseInt($("#connect").data("lab-id"));
        console.log(labId);
        stompClient.publish({
            destination: "/app/submitTask",
            body: JSON.stringify({'labId': labId})
        });
    } else {
        // Handle case where WebSocket connection is not yet established
        console.error('WebSocket connection not established');
    }
}


const buildAccordionItem = function (id, result, title, descriptionUrl) {
    let color;
    if (result === 'SUCCESS') {
        color = "bg-success text-white";
    } else {
        color = "bg-danger text-white";
    }
    let item = document.createElement('div');
    item.className = 'accordion-item';

    let header = document.createElement('h2');
    header.className = 'accordion-header';
    header.id = 'heading_' + id;

    let button = document.createElement('button');
    button.className = `accordion-button collapsed ${color}`;
    button.setAttribute('type', 'button');
    button.setAttribute('data-bs-toggle', 'collapse');
    button.setAttribute('data-bs-target', '#accordion_' + `${id}`);
    button.setAttribute('aria-expanded', 'false');
    button.setAttribute('aria-controls', 'flush-collapseOne_' + id);
    button.textContent = title;

    header.appendChild(button);

    let collapse = document.createElement('div');
    collapse.id = "accordion_" + id;
    collapse.className = 'accordion-collapse collapse';

    let body = document.createElement('div');
    body.className = 'accordion-body ' + color;
    body.textContent = "You can see details "
    body.style.whiteSpace = 'normal';

    // Append the content generated by generateInnerAccordion
    const a = document.createElement("a")
    a.href = descriptionUrl;
    a.textContent = "here";
    a.setAttribute("target", "_blank");
    body.appendChild(a);

    collapse.appendChild(body);

    item.appendChild(header);
    item.appendChild(collapse);

    return item;
}


function addAccordionItem(attempt) {
    $("#accordionFlushExample").append(buildAccordionItem(attempt.id, attempt.result, "Verification " + attempt.runNumber, attempt.detailsUrl));
}




$(function () {
    $("form").on('submit', (e) => e.preventDefault());
    $( "#connect" ).click(() => connect());
    $( "#disconnect" ).click(() => disconnect());
    $( "#send" ).click(() => submitTask());
});